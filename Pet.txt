click==8.0.1
Flask==2.0.1
itsdangerous==2.0.1
Jinja2==3.0.1
MarkupSafe==2.0.1
psycopg2-binary==2.9.1
redis==3.5.3
Werkzeug==2.0.1

Serv: ssh user_105@23.88.52.139, password: 123
DB: 159.69.151.133:5056, Database: user_20_db, Username: user_20, Password: 123
DB diagram: https://drawsql.app/myowncompany/diagrams/cto#

Done:
	/login
	/reg
	/cl
	/all
	/user_info
	/new_storage_order
	/change_storage_order
	/new_user_vehicle
	/change_user_info
	/delete_user
	/deactivate_user
	/activate_user
	/delete_user_vehicle
	/delete_storage_order
	/change_user_vehicle
	/available_storage
	/create_tire_service_order
	/delete_tire_service_order
	/add_task_to_list_of_works
	
ToDo: 
	- the user cannot create two tire_service_orders for the same vehicle on the same date and time
	- add to the /user_info tire_order datas 
	- schedule (for workers)
	- add to list_of_works how to choose a worker
	- new storage order dates validate (start before today)
	- update the token's TTL in the redis db after each user action

!	- create cost_of_storage table (price list? any discout? so many questions!)
!	- alter column cost in the storage_orders table (calculate costs)
	- change_tire_service_order
	- add_task_to_list_of_works
	- change_list_of_works
	- delete_list_of_works
	- create_subscription
	- change_subscription
	- delete_subscription
	- swagger

DrawSQL DB:
	table Payment (payment_id, user_id, card_number, exp_date, owner_name, cvv_cvc)
	
DISCLAIMER:
user_authorization checks that: 	
	if email does not exist in the DB: return "The user does not exist. Please, register" and redirect to /reg
		if the token does not exist in redis db: redirect to /login

/login [POST]
	input:  
			email				- required
			password			- required
		
	output: 
			Hello message
			email
			token
			user_id

	if email does not exist in DB: note
		if pass does not valid: note
			if token exists in the redis db: set new ex time and return the token
			else: 
				generate new token, add to the redis db and return it


/reg [POST] - register a new user
	input: 
			f_name				- required
			l_name				- required
			email				- required
			phone				- required
			password			- required
		   
	output: 
			user_id
			f_name
			l_name
			email
			phone
			passw
			
	if email does not exisis in the DB: note and redirect to /reg
	else: 
		add new user to the DB and return info from the DB with user_id

	
/cl [GET] - clear users DB


/all [GET] - get a list of all users
	output:
			user_id
			f_name			
			l_name
			email
			phone
			password
	
	if there are no users in the DB: note


/user_info [POST] - get info about the logged user
	input: 
			email				- required
			token				- required

	output:
			user_id
			f_name
			l_name
			email
			phone
			passw
	
	user_authorization
			return info

	
/new_storage_order [POST]
	input:
			token				- required
			email				- required
			start_date			- required
			stop_date			- required
			size_name			- required
	
	output:
			email
			start_date
			stop_date
			size_id
			shelf_id
			st_ord_id

	user_authorization
			if there is no available shelf of the size needed in the warehouse: note		
				add in the "storage_order" base info about the storage order
				update in the "warehouse" base availability of the occupied storage place

				
/change_storage_order [POST]				
	input:
			st_ord_id 			- required
			email				- required
			token				- required
			start_date			- optional
			stop_date			- optional
			st_ord_cost			- optional
			size_id				- optional
			
	output:
			st_ord_id
			start_date
			stop_date
			size_id
			st_ord_cost
			shelf_id
	
	user_authorization
			if the provided dates are invalid: note
				if the optional data is None: take the data needed from DB
				if size_id is need to be changed make sure that the warehouse has an availabe shelf

				
/new_user_vehicle [POST]
	input:
			email				-required
			token				-required
			vehicle_name		-required
			size_name			-required
	
	output:
			u_veh_id
			vehicle_name
			size_name
			
	user_authorization
			if the vehcile type or tire size is not specified in the DB: note 
				add the date in to the DB
				
/change_user_info [PATCH]				
	input:
			email				- required
			token				- required
			f_name				- optional
			l_name				- optional
			new_email			- optional
			password			- optional

			
	output:
			user_id
			f_name
			l_name
			email
			phone
			password
	
	user_authorization
			if all optional data is None OR the new data is equal to the DB data: nothing needs to be changed
				if some optional data is None: take the data needed from DB
					if the password and/or email have been changed - the user must log in again
					
/delete_user [POST] - delete the user and any data from other tables associated with the user
	input:
			email				- required
			token				- required
			ARE_YOU_SURE?		- required
			
	output:
			sad message
			
	user_authorization
			if the "ARE_YOU_SURE?" value is not 'True': return a funny message
			
/deactivate_user [POST]
	input:	
			email				- required
			token				- required
			ARE_YOU_SURE?		- required
	
	output:
			confirmaion message
			
	user_authorization
			if the user has already been deactivated: return a message
				if the "ARE_YOU_SURE?" value is not 'True': return a funny message
				
/activate_user [POST]
	input:	
			email				- required
			admin_password		- required
	
	output:
			confirmaion message
			
	the email must exist, admin_password is 'admin'
			
/delete_user_vehicle [DELETE]
	input:
			email				- required
			token				- required
			user_vehicle_id		- required
	
	output:
			confirmaion message

	user_authorization
			if it is not user's vehicle: Call the police!!! :)

/delete_storage_order [DELETE]	
	input:
			email				- required
			token				- required
			storage_order_id	- required
	
	output:
			confirmaion message

	user_authorization
			if it is not user's storage order: :)
		
/change_user_vehicle [PATCH]
	input:
			email				- required
			token				- required
			user_vehicle_id		- required
			new_vehicle_name	- optional
			new_size_name		- optional
			
	output:
			u_veh_id
			old_vehicle_name
			new_vehicle_name
			old_size_name
			new_size_name
			
	user_authorization
			if it is not user's vehicle: Call the police!!! :)
				if all optional data is None OR the new data is equal to the DB data: nothing needs to be changed
					if some optional data is None: take the data needed from DB

/available_storage [GET] - show available free storage places in the warehouse

/create_tire_service_order [POST]
	input:
			email				- required
			token				- required
			order_date			- required
			user_vehicle_id_id	- required

	
	output:
			service_order_id
			date
			worker_id
			worker_first_name
			worker_last_name
			worker_phone
			worker_email
			
	user_authorization
			if it is not user's vehicle: :)
				max load per one manager - 5
					
/delete_tire_service_order [DELETE}
	input:
			email				- required
			token				- required
			service_order_id	- required
			
	output:
			confirmaion message
			
	user_authorization
			if it is not user's order: :)
				if manager's load becomes less than 5, then mark the manager as available
				
/create_list_of_works
	input:
			email				- required
			token				- required
			service_order_id	- required
			
/add_task_to_list_of_works	[POST]
	input:
			email				- required
			token				- required
			service_order_id	- required
			task_name			- required
			numbers_of_tasks	- optional
			
	output:
			confirmaion message
	
	user_authorization
			if it is not user's order: :)
				if numbers_of_tasks is none or not isdigit: return warning message
					