{
	"info": {
		"_postman_id": "34c27762-4d30-4f9a-a5b3-b99f66fb9ed1",
		"name": "Homework_4_tests_scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_Login_parse_token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody)\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonff = pm.response.json();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 1:\r",
							"\r",
							"// необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Elon",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Create schema of expected json in response\r",
							"const schema =  {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// Making sure that the json schema in the response is same as expected\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// variables declaration\r",
							"var jsonData = pm.response.json();\r",
							"var jsonDataReq = JSON.parse(pm.request.body);\r",
							"\r",
							"pm.test(\"Multiplication salary coefficients after 4 years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(parseInt(jsonDataReq.salary, 10) * 4);\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplication salary coefficients after 12 month\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseInt(jsonDataReq.salary, 10) * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplication salary coefficients after 6 month\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(parseInt(jsonDataReq.salary, 10) * 2);\r",
							"});\r",
							"\r",
							"\r",
							"// create request options\r",
							"const options = {\r",
							"    method: 'POST',\r",
							"    url: 'http://162.55.220.72:5005/get_test_user',\r",
							"    body: {\r",
							"       'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key':'salary', 'value':jsonData.person.u_salary_1_5_year},\r",
							"                {'key':'auth_token', 'value':pm.environment.get('token')}\r",
							"            ]\r",
							"    }\r",
							"};\r",
							"\r",
							"// send reqest using u_salary_1_5_year as parameter\r",
							"pm.sendRequest(options, (error, response) => {\r",
							"    if (error) {\r",
							"        console.log(\"Error:\");\r",
							"        console.log(error);\r",
							"    }\r",
							"});\r",
							"\r",
							"var data1 = [true];\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 2:\r",
							"\r",
							"// http://162.55.220.72:5005/user_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\":\"40\",\"salary\":\"1000\",\"name\":\"Elon\",\"auth_token\":\"{{token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Create schema of expected json in response\r",
							"const schema =  {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  }\r",
							"}\r",
							"\r",
							"// Making sure that the json schema in the response is same as expected\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// variables declaration\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Multiplication salary coefficient *2\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[1],10)).to.eql(jsonData.salary[0]*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplication salary coefficient *3\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[2],10)).to.eql(jsonData.salary[0]*3);\r",
							"});\r",
							"\r",
							"pm.test(\"Third salary element is bigger than first\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[2],10)).to.be.greaterThan(jsonData.salary[0])\r",
							"});\r",
							"\r",
							"pm.test(\"Third salary element is bigger than second\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[2],10)).to.be.greaterThan(parseInt(jsonData.salary[1],10))\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 3:\r",
							"\r",
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Elon Musk",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Create schema of expected json in response\r",
							"const schema =  {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\",\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"        \"type\": \"number\"\r",
							"    }\r",
							"  }\r",
							"}\r",
							"\r",
							"// Making sure that the json schema in the response is same as expected\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// variables declaration\r",
							"var jsonData = pm.response.json();\r",
							"var jsonDataReq = request.data;\r",
							"\r",
							"pm.test(\"First multiplication coefficient *0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(jsonDataReq.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Second multiplication coefficient *2.5\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(jsonDataReq.weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 4:\r",
							"\r",
							"// http://162.55.220.72:5005/test_pet_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "5",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "1",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Bobby",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Create schema of expected json in response\r",
							"const schema =  {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// Making sure that the json schema in the response is same as expected\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// variables declaration\r",
							"var jsonData = pm.response.json();\r",
							"var jsonDataReq = request.data;\r",
							"pm.environment.set(\"name\", jsonDataReq.name);\r",
							"\r",
							"pm.test(\"Same name values in the response and environment variable\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"pm.test(\"Same age values in the request and response\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(jsonDataReq.age)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 5:\r",
							"\r",
							"// http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Elon",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Variable declaration\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"let randomNum = _.random (0,Object.keys(pm.response.json()).length);\r",
							"let currencyObj = jsonData[randomNum];\r",
							"\r",
							"// Environment variable declaration with Cur_ID parameter of the random object in the response array\r",
							"pm.environment.set(\"currency\", parseInt(currencyObj.Cur_ID));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 6:\r",
							"\r",
							"// http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Create schema of expected json in response\r",
							"const schema =  {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// Making sure that the json schema in the response is same as expected\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Episode 7:\r",
							"\r",
							"// http://162.55.220.72:5005/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{currency}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_setNextRequest_slow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Variables declaration\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"if (!pm.environment.has(\"counter\")) {\r",
							"    pm.environment.set(\"counter\", 0);\r",
							"}\r",
							"var cnt = parseInt(pm.environment.get(\"counter\"));\r",
							"var currencyObj = jsonData[cnt];\r",
							"\r",
							"// create request options\r",
							"let options = {\r",
							"    method: 'POST',\r",
							"    url: 'http://162.55.220.72:5005/curr_byn',\r",
							"    body: {\r",
							"        'mode': 'formdata',\r",
							"        'formdata': [\r",
							"            {'key':'curr_code', 'value':currencyObj.Cur_ID},\r",
							"            {'key':'auth_token', 'value':pm.environment.get('token')}\r",
							"            ]\r",
							"    }\r",
							"};\r",
							"\r",
							"// send the request and output filtered response to the console\r",
							"pm.sendRequest(options, (error, response) => {\r",
							"    if (pm.response.code == 200 && pm.response.json().hasOwnProperty(\"Cur_OfficialRate\")) {\r",
							"        console.log(response.json());\r",
							"    } else {return;}\r",
							"});\r",
							"\r",
							"// creatу a request loop along the length of an array of objects\r",
							"if (cnt < Object.keys(jsonData).length) {\r",
							"    pm.environment.set(\"counter\", cnt + 1);\r",
							"    if (parseInt(pm.environment.get(\"counter\")) == Object.keys(jsonData).length) {\r",
							"        pm.environment.unset(\"counter\");\r",
							"        postman.setNextRequest(null);\r",
							"    } else {\r",
							"        postman.setNextRequest(\"8_setNextRequest_slow\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_setNextRequest_faster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"   var jsonData = JSON.parse(responseBody); \r",
							"   if (pm.response.code == 200 && pm.response.json().hasOwnProperty(\"Cur_OfficialRate\")) {\r",
							"        console.log(jsonData);\r",
							"    }\r",
							"} \r",
							"catch {\r",
							"}\r",
							"finally {\r",
							"    var cnt = pm.environment.get(\"counterCurr\");\r",
							"    if (cnt + 1 != pm.environment.get(\"currObj\").length) {\r",
							"        pm.environment.set(\"Cur_ID_c\", parseInt(pm.environment.get(\"currObj\")[cnt+1].Cur_ID));\r",
							"    }\r",
							"    if (cnt < pm.environment.get(\"currObj\").length) {\r",
							"        pm.environment.set(\"counterCurr\", cnt + 1);\r",
							"        if (pm.environment.get(\"counterCurr\") == pm.environment.get(\"currObj\").length) {\r",
							"            pm.environment.set(\"Cur_ID_c\", parseInt(pm.environment.get(\"currObj\")[0].Cur_ID));\r",
							"            pm.environment.unset(\"counterCurr\");\r",
							"            pm.environment.unset(\"currObj\");\r",
							"            postman.setNextRequest(null);\r",
							"        } else {          \r",
							"            postman.setNextRequest(\"8_setNextRequest_faster\");\r",
							"        }\r",
							"    } \r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.has(\"currObj\")) {\r",
							"    let opt = {\r",
							"        method: 'POST',\r",
							"        url: 'http://162.55.220.72:5005/currency',\r",
							"        body: {\r",
							"            'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key':'auth_token', 'value':pm.environment.get('token')}\r",
							"                ]\r",
							"        }\r",
							"    };\r",
							"    pm.sendRequest(opt, (error, response) => {\r",
							"        pm.environment.set(\"currObj\", response.json());\r",
							"    });\r",
							"}\r",
							"\r",
							"if (!pm.environment.has(\"counterCurr\")) {\r",
							"    pm.environment.set(\"counterCurr\", 0);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID_c}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_For_Loop_fastest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Variable declaration\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"for (let i = 0; i < jsonData.length; i++) {\r",
							"    let options = {\r",
							"    method: 'POST',\r",
							"    url: 'http://162.55.220.72:5005/curr_byn',\r",
							"    body: {\r",
							"        'mode': 'formdata',\r",
							"        'formdata': [\r",
							"            {'key':'curr_code', 'value':jsonData[i].Cur_ID},\r",
							"            {'key':'auth_token', 'value':pm.environment.get('token')}\r",
							"            ]\r",
							"        }   \r",
							"    };\r",
							"\r",
							"    pm.sendRequest(options, (err, res) => {\r",
							"        if (res.code == 200 && res.json().hasOwnProperty(\"Cur_OfficialRate\")) {\r",
							"            console.log(res.json());   \r",
							"        }\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		}
	]
}